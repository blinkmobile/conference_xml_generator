class ConferencesController < ApplicationController
#before_filter :authenticate_admin_user!
  
  def suitcase
    @conference = Conference.find(params[:id])
    
    respond_to do |format|
      format.xml # suitcase.xml.builder
    end
  end
  
  def download
    if admin_user_signed_in?
      @conference = Conference.find(params[:id])
      zip = generate
      begin
        require 'rubygems'
        require 'mechanize'
        require 'pp'
        require 'json'

        agent = Mechanize.new #{ |a| a.log = Logger.new('mech.log') }

        #Check for answerSpace existance (Create if not existing)
        admintools = agent.post()
        answerspace = admintools.link_with(:text => @conference.answerspace)
        if !answerspace
          answerspace = agent.post()
        end

        #Log in
        login = agent.post()

        #Access the keyword list page to let answerSpace trigger creation events
        init = agent.get()

        #Upload
        import = agent.get()
        importform = import.form
        importform.file_uploads.first.file_name = zip
      	import = agent.submit(importform, importform.buttons.first)

        #Trigger answerSpace import error checking
        importform = import.form
        importform.method = "POST"
        importform.action = 
        submit = agent.submit(importform)
        #TODO: check for null value returned here

        #Trigger answerSpace import backup generation
        backup = agent.post()
        backupjson = JSON.parse(backup.body)

        #Finally trigger the import
        importform = import.form
        importform.action = 
        importform.path = backupjson["path"]
        importform.filename = backupjson["filename"]
        importform = agent.submit(importform)

        #Logout
        logout = agent.get()
        
        #Let the user know how it went!        
        flash[:notice] = "You have successfully created an answerSpace!"
        redirect_to(:back)
      rescue
        respond_to do |format|
          format.html # download.html.erb
        end
      end
    end
  end

  def generate
  	export_path = "#{RAILS_ROOT}/tmp/export/"
  	temp_path = "#{RAILS_ROOT}/tmp/export/generation"
  
    #Generate the Export File RIGHHHHHHT Here
    require 'zip/zip'
    require 'digest/md5'
    require 'csv'
    require 'json'
    require 'open-uri'
    
    
    if !File.exist?(export_path)
      Dir::mkdir(export_path)
    end
    
    if File.exist?(export_path + (params[:id]) + "Export.zip")
      File.delete(export_path + (params[:id]) + "Export.zip")
    end
    
    begin
        Dir::mkdir(temp_path)
    	temp = Dir.new(temp_path)

		Zip::ZipFile.open(temp_path + "/backup.zip", Zip::ZipFile::CREATE){
			|zipfile|
			#zipfile.get_output_stream("bmp_answerspace.csv") { |f| f.puts bmp_answerspace }
			#zipfile.get_output_stream("bmp_blinkform.csv") { |f| f.puts bmp_blinkform }
			#zipfile.get_output_stream("bmp_category.csv") { |f| f.puts bmp_category }
			#zipfile.get_output_stream("bmp_interaction_category.csv") { |f| f.puts bmp_interaction_category }
			zipfile.get_output_stream("bmp_interaction.csv") { |f| f.puts bmp_interaction }
			#zipfile.mkdir("images")
		  }
	
		digest = Digest::MD5.hexdigest(File.read(temp_path + "/backup.zip"))
		
		zip = Zip::ZipFile.open(export_path + (params[:id]) + "Export.zip", Zip::ZipFile::CREATE){
		  |zipfile|
		  zipfile.get_output_stream("info.ini") { |f| f.puts "date = " + DateTime.now.strftime("%d-%b-%Y %H:%M%P") + ";\ndbversion = 1;\nmd5 = " + digest + ";\ncomment = Generated by BB's event builder!;" }
		  zipfile.add("backup.zip", temp_path + "/backup.zip")
		}
	rescue Exception => e
  		puts e.message
	ensure
		  if File.directory?(temp_path)
			  Dir.foreach(temp_path) {
				|file|
				if !File.directory?(file)
				  #puts file
				  File.delete(temp_path + "/" + file)
				end
			  }
		
			  Dir::delete(temp_path)
		  end
	end
        return export_path + (params[:id]) + "Export.zip"
  end
  #The next line turns on background processing, though the rest of the app doesnt yet support it.
  #handle_asynchronously :generate
  
  def bmp_answerspace
  	bmp_answerspace_csv = CSV.generate do |csv|
  	  csv << ["version", "business_name", "timezone", "update_gui_type", "created_time", "permit_mobi", "permit_mobi_iphone", "permit_blackberry", "permit_sms", "permit_mms", "permit_email", "permit_subscriptions", "permit_update_by_sms", "permit_user_credentials", "user_credentials_config", "root_email", "root_password", "soap_password", "icon_filename", "config", "sitemap", "registered_only", "allow_mobi", "mobi_registered_only", "mobi_registered_only_message", "mobi_image_keywords", "mobi_categories", "mobi_default_category_id", "mobi_master_categories", "mobi_intro", "mobi_help", "mobi_title", "mobi_logo_filename", "mobi_row1_color", "mobi_row2_color", "mobi_bg_color", "mobi_result_bg_color", "mobi_bg_filename", "mobi_result_bg_filename", "allow_mobi_iphone", "mobi_iphone_registered_only", "mobi_iphone_registered_only_message", "mobi_iphone_image_keywords", "mobi_iphone_categories", "mobi_iphone_default_category_id", "mobi_iphone_master_categories", "mobi_iphone_intro", "mobi_iphone_help", "mobi_iphone_title", "mobi_iphone_webclip_filename", "mobi_iphone_splash_filename", "mobi_iphone_logo_filename", "mobi_iphone_row1_color", "mobi_iphone_row2_color", "mobi_iphone_bg_color", "mobi_iphone_result_bg_color", "mobi_iphone_bg_filename", "mobi_iphone_result_bg_filename", "allow_ipad", "ipad_registered_only", "ipad_registered_only_message", "ipad_image_keywords", "ipad_categories", "ipad_categories_list", "ipad_categories_list_style", "ipad_categories_list_width", "ipad_default_category_id", "ipad_master_categories", "ipad_header_style", "ipad_intro", "ipad_intro_style", "ipad_help", "ipad_title", "ipad_webclip_filename", "ipad_splash_filename", "ipad_logo_filename", "ipad_logo_width_percent", "ipad_row1_color", "ipad_row2_color", "ipad_bg_color", "ipad_result_bg_color", "ipad_bg_filename", "ipad_result_bg_filename", "ipad_interface_style", "allow_blackberry", "blackberry_registered_only", "blackberry_registered_only_message", "blackberry_image_keywords", "blackberry_categories", "blackberry_default_category_id", "blackberry_master_categories", "blackberry_intro", "blackberry_help", "blackberry_title", "blackberry_logo_filename", "blackberry_row1_color", "blackberry_row2_color", "blackberry_bg_color", "blackberry_result_bg_color", "blackberry_bg_filename", "blackberry_result_bg_filename", "allow_sms", "sms_credits", "allow_negative_sms_credits", "sms_warning_threshold", "sms_contact_email", "blink_sms_contact_email", "sms_prefix", "sms_null_keyword_id", "sms_inbound_number", "sms_from", "sms_gateway", "sms_gateway_username", "sms_gateway_password", "sms_country_code", "allow_mms", "mms_null_keyword_id", "mms_inbound_number", "mms_from", "mms_subject", "allow_email", "email_null_keyword_id", "email_inbound_address", "email_forward_ip_address", "email_from", "email_subject", "data", "partner_id"]
  	  csv << ["", "", "", "", '"2011-11-28 00:13:40"', "yes", "yes", "yes", "no", "no", "yes", "yes", "yes", "yes", "", "", "", "", "", %^{"all":{"defaultScreen":"home","siteStructure":"categories","characterEncoding":"iso-8859-1","imageCaptureQuality":"60","imageCaptureScale":"40","downloadTimeout":"30","uploadTimeout":"15","nativeApplication":[],"loginAccess":false,"loginUseInteractions":true,"loginPromptInteraction":"29403","loginStatusInteraction":"29405"},"default":{"categoriesArrangement":"2 column","vanillaVisualStyle":true,"logoBanner":"header.png","styleSheet":"#stackLayout {\r\n    background-image: url(http:\/\/blinkev.co\/images\/20049\/bg.png);\r\n    -moz-background-size:100% 100%; \/* Firefox 3.6 *\/\r\n    background-size:100% 100%;\r\n    background-repeat:no-repeat;\r\n    margin-bottom: -400px;\r\n}\r\n\r\n.bordered \r\n{\r\n    border: 0px solid #ffffff;\r\n    background-color: transparent;\r\n    border-radius: 0px;\r\n}\r\n\r\n#stackLayout > .view \r\n{\r\n\r\n    padding-top: 10px;\r\n}\r\n\r\ndiv.whitebox{\r\nbackground-color: #ffffff;\r\nheight:auto;\r\nmargin-left:5px;\r\nmargin-right:5px;\r\nmargin-bottom:5px;\r\nmargin-top:5px;\r\npadding-left:5px;\r\npadding-right:5px;\r\npadding-top:5px;\r\npadding-bottom:5px;\r\ntext-align:left;\r\n}\r\n\r\ndiv.greybox{\r\nbackground-color: #999999;\r\nheight:auto;\r\nmargin-left:5px;\r\nmargin-right:5px;\r\nmargin-bottom:5px;\r\nmargin-top:5px;\r\npadding-left:5px;\r\npadding-right:5px;\r\npadding-top:5px;\r\npadding-bottom:5px;\r\ntext-align:left;\r\n}\r\n\r\nh6 {\r\n  color: #0073a4;\r\n  font-size: large;\r\n}\r\n\r\ndiv.silver { \r\nbackground: -webkit-gradient(linear, 0% 0%, 0% 100%, from(#ffffff), to(#eef2f1));\r\nbackground-color: #cccccc; \/* fallback color if gradients are not supported *\/\r\nborder: 1px;\r\nborder-style: solid ;\r\nborder-color: #999999;\r\n}\r\n\r\n.rateButton {\r\n\r\n    float: right;\r\n    display:inline-block;\r\n    width:auto; \r\n    height:20px;\r\n    padding:4px;\r\n    margin-right:2px;\r\n    border:1px #000000 solid;\r\n    text-align:center;\r\n    text-decoration:none;\r\n    color:#ffffff;\r\n    background: -webkit-gradient(linear, 0% 0%, 0% 100%, from(#0071a1), to(#004e6f));\r\n    background-color: #004e6f; \/* fallback color if gradients are not supported *\/\r\n  \r\n}","interfaceStyle":"background-color:#FFFFFF;","icon":"vforumwebclip.png","displayName":"vForum2011"}}^, %^{"masterCategories":[],"categories":[20588,20589,20590,20591,20616,20617,20618,20619],"interactions":{"29723":[],"29722":[],"29726":[],"29725":[],"29732":[],"29731":[],"29403":[],"29405":[],"29684":[],"29730":[],"29741":[],"29696":[],"29718":[],"29724":[],"29740":[],"29737":[],"29345":[],"29651":[],"29652":[],"29654":[],"29655":[],"29656":[],"29657":[],"29658":[],"29337":[],"29338":[],"29339":[],"29340":[],"29341":[],"29738":[],"29717":[],"29334":[],"29335":[],"29336":[],"29734":[],"29733":[],"29735":[],"29727":[],"29736":[],"29739":[],"29946":[],"29720":[],"29728":[],"29719":[],"29721":[],"29402":[]},"forms":["Evaluation_Form"],"groups":[],"c20588":[29345,29651,29652,29654],"c20589":[29718],"c20590":[29655,29656,29657,29658],"c20591":[29730],"c20616":[29337,29338,29339,29340,29341],"c20617":[29717,29738],"c20618":[29334,29335,29336],"c20619":[29727,29733,29734,29735,29736,29739]}^,'"allow all"', "yes", "", "", "no", "no", "", "no", "", "", "", "", "", "", "", "", "", "", "yes", "", "", "no", "no", "", "no", "", "", "", "", "", "", "", "", "", "", "", "", "yes", "no", "", "no", "no", "textonly", "", "", "", "no", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "yes", "no", "", "no", "no", "", "no", "", "", "", "", "", "", "", "", "", "", "no", "0", "no", "100", "",'"alan@blinkmobile.com.au,ben@blinkmobile.com.au"', "", "", "", "", "", "", "", "61", "no", "", "", "", "", "yes", "", "", "", "", "", "", ""]
  	end
  	return bmp_answerspace_csv
  end
  
  def bmp_blinkform
    bmp_blinkform_csv = CSV.generate do |csv|
      csv << ["form"]
  	end
  	return bmp_blinkform_csv
  end
  
  def bmp_category
    bmp_category_csv = CSV.generate do |csv|
      csv << ["cat"]
  	end
  	return bmp_category_csv
  end
  
  def bmp_interaction_category
    bmp_interaction_category_csv = CSV.generate do |csv|
      csv << ["intcat"]
  	end
  	return bmp_interaction_category_csv
  end
  
  def bmp_interaction
    bmp_interaction_csv = CSV.generate do |csv|
  	  # Headers
  	  csv << ['keyword','image_filename','other_keyword_id','is_alias','alias_of','created_time','created_by','modified_time','modified_by','updated_time','updated_by','status','restricted','registered_users_only','share','share_show_icon','order','description','help','append_timestamp','type','message','input_config','code','config','registered_only','allow_mobi','mobi_image_filename','mobi_subscribe','mobi_subscribe_info','mobi_description','mobi_help','mobi_append_timestamp','mobi_type','mobi_preload_response','mobi_message','mobi_input_start','mobi_input_config','mobi_code','allow_mobi_iphone','mobi_iphone_image_filename','mobi_iphone_description','mobi_iphone_help','mobi_iphone_append_timestamp','mobi_iphone_type','mobi_iphone_message','mobi_iphone_input_config','mobi_iphone_code','allow_ipad','ipad_image_filename','ipad_description','ipad_help','ipad_message','ipad_input_config','ipad_code','allow_blackberry','blackberry_image_filename','blackberry_description','blackberry_help','blackberry_preload_response','blackberry_message','blackberry_input_start','blackberry_input_config','blackberry_code','allow_sms','sms_subscribe','sms_max_returns','sms_append_timestamp','sms_add_tag','sms_type','sms_message','sms_code','allow_mms','mms_subject','mms_append_timestamp','mms_add_tag','mms_type','mms_message','mms_code','allow_email','email_subscribe','email_subject','email_append_timestamp','email_add_tag','email_type','email_message','email_code']
  	  
  	  #Generating a base format here that we can override and reuse for saner CSV Generation
  	  interaction_format = Array['InteractionName', nil, 0, 'no', nil, '2011-10-12 05:56:39', '', '2011-10-12 05:56:39', 20068, nil, nil, 'active', 'no', 'no', 'no', 'yes', 0, nil, nil, nil, 'message', nil, nil, nil, '{"all":{"type":"xslt"}, "default":{"displayName":"display name", "xml":"fullProgram", "xsl":"XSLT GOES HERE!!!!"}}', 'allow all', 'yes', nil, nil, nil, nil, nil, nil, nil, 'no', nil, 'list', nil, nil, 'yes', nil, nil, nil, nil, nil, nil, nil, nil, 'yes', nil, nil, nil, nil, nil, nil, 'yes', nil, nil, nil, 'no', nil, 'list', nil, nil, 'no', nil, 1, nil, nil, nil, nil, nil, 'no', nil, nil, nil, nil, nil, nil, 'yes', nil, nil, nil, nil, nil, nil,nil]
  	  
  	  if @conference.days.count > 0
  	    @conference.days.each do |day|
  	      interaction_array = interaction_format.dup
  	      interaction_array[0] = day.id
  	      interaction_array[24] = JSON.generate({"all" => {"type" => "xslt"}, "default" => {"displayName" => day.displayName, "xml" => "fullProgram", "xsl" => data('Sessions', day.id)}}).gsub('\\"', '^')
  	      csv << interaction_array
        end
      end
      
      if @conference.sessions.count > 0
        interaction_array = interaction_format.dup
  	    interaction_array[0] = 'search'
  	    interaction_array[24] = JSON.generate({"all" => {"type" => "xslt"}, "default" => {"displayName" => "display name", "xml" => "fullProgram", "xsl" => data('Sessions', "day.id")}}).gsub('\\"', '^')
  	    csv << interaction_array
  	    
  	    interaction_array = interaction_format.dup
  	    interaction_array[0] = 'starred'
  	    interaction_array[24] = JSON.generate({"all" => {"type" => "xslt"}, "default" => {"displayName" => "display name", "xml" => "fullProgram", "xsl" => data('Sessions', "day.id")}}).gsub('\\"', '^')
  	    csv << interaction_array
  	    
  	    interaction_array = interaction_format.dup
  	    interaction_array[0] = 'stream'
  	    interaction_array[24] = JSON.generate({"all" => {"type" => "xslt"}, "default" => {"displayName" => "display name", "xml" => "fullProgram", "xsl" => data('Sessions', "day.id")}}).gsub('\\"', '^')
  	    csv << interaction_array
  	    
  	    interaction_array = interaction_format.dup
  	    interaction_array[0] = 'upcoming'
  	    interaction_array[24] = JSON.generate({"all" => {"type" => "xslt"}, "default" => {"displayName" => "display name", "xml" => "fullProgram", "xsl" => data('Sessions', "day.id")}}).gsub('\\"', '^')
  	    csv << interaction_array

      end
      
      if @conference.speakers.count > 0
        csv << ["speakerlist"]
        csv << ["speakerdetails"]
        csv << ["speakersearch"]
        csv << ["starredspeakers"]
      end
      
      if @conference.abstracts.count > 0
        csv << ["abstractlist"]
        csv << ["abstractdetails"]
        csv << ["abstreactsearch"]
        csv << ["starredabstracts"]
      end
      
      if @conference.rooms.count > 0
        csv << ["roomlist"]
        csv << ["roomdetails"]
        csv << ["roomsearch"]
        csv << ["starredrooms"]
      end
      
      if @conference.sponsors.count > 0
        csv << ["sponsorlist"]
        csv << ["sponsordetails"]
        csv << ["sponsorsearch"]
        csv << ["starredsponsors"]
      end

  	end
bmp_interaction_csv.gsub!('^', '\\"')
  	return bmp_interaction_csv
  end
  
  def data(type, id)
    page_string = ''
    url = 'https://raw.github.com/benbarclay/ConferenceXML/master/' + type + '.xsl' 
    open(url) {|f|
      page_string = f.read
    }
    #logger.debug 
    page_string = page_string.gsub( %^<xsl:variable name="day" select="'32'"/>^,  %^<xsl:variable name="day" select="'^ + id.to_s +  %^'"/>^)
    return page_string
  end
end
